name: CI
on:
  workflow_call:
  release:
    types: [published]
  pull_request:
    branches: ["develop"]
    types: [closed]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os:
          [ubuntu-22.04]
          #os: [ windows, macos, ubuntu ]
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-build-${{ matrix.os }}
      cancel-in-progress: true
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"
          cache: "gradle"
          cache-dependency-path: | # optional
            gradle/*
            *.gradle*
            **/gradle-wrapper.properties
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

      - name: Build Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: 8.1
          add-job-summary-as-pr-comment: on-failure
      - run: gradle build --dry-run # Test build configuration

  test:
    strategy:
      fail-fast: false
      matrix:
        os:
          [ubuntu-22.04]
          #os: [ windows, macos, ubuntu ]
    needs: build
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-build-${{ matrix.os }}
      cancel-in-progress: true
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}
    steps:
      - name: Start MongoDB
        uses: supercharge/mongodb-github-action@1.10.0
        with:
          mongodb-version: 5.0.9
          mongodb-username: ${{ secrets.MONGO_USER }}
          mongodb-password: ${{ secrets.MONGO_PASSWORD }}
          # mongodb-db: 'MaraffaStatisticsDB-test'
          mongodb-port: 27012
      - name: Checkout
        uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"
          cache: "gradle"
      - name: Test
        run: ./gradlew test

  deploy:
    runs-on: ubuntu-22.04
    needs: test
    permissions: write-all
    strategy:
      fail-fast: false
      matrix:
        # os: [ windows, macos, ubuntu ]
        node-version: [18.x]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.CHANGELOG }}
      - name: Set project name
        run: echo "REPOSITORY_NAME=middleware-maraffa" >> $GITHUB_ENV
      - name: lowercase github.repository
        run: |
          echo "IMAGE_NAME=`echo ${{github.repository_owner}}/${{ env.REPOSITORY_NAME }} | tr '[:upper:]' '[:lower:]'`" >> ${GITHUB_ENV}
      - name: Extract tag name
        run: echo "TAG_NAME=${{ github.event.release.tag_name }}" >> $GITHUB_ENV
      - name: Set version
        run: |
          if [ "${{ github.ref }}" == 'refs/heads/develop' ]; then
            echo "VERSION=stage" >> ${GITHUB_ENV}
          else 
            echo "VERSION=latest" >> ${GITHUB_ENV}
          fi
      - name: Use cache
        uses: actions/cache@v2
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}
      - name: check tag
        run: echo ${{ github.event.release.tag_name }}
      - name: check ENV
        run: echo $GITHUB_ENV
      - name: "Login to GitHub Container Registry"
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{github.actor}}
          password: ${{ secrets.CHANGELOG }}
      - name: Build Docker image
        run: echo "docker build -t ghcr.io/${{ env.IMAGE_NAME}}:${{ env.VERSION }}  ."
      - name: Push Docker image
        run: echo "docker push ghcr.io/${{ env.IMAGE_NAME}}:${{ env.VERSION }} "

      ##TODO check this
      - name: Build Docker image with tag
        run: |
          if [ "${{ github.event.release.tag_name }}" != '' ]; then
            echo "docker build -t ghcr.io/${{ env.IMAGE_NAME}}:${{ env.TAG_NAME }}  ."
            echo "docker push ghcr.io/${{ env.IMAGE_NAME}}:${{ env.TAG_NAME }}"
          fi

  # deploy:
  #   if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
  #   runs-on: ubuntu-22.04
  #   needs: build
  #   permissions: write-all
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       # os: [ windows, macos, ubuntu ]
  #       node-version: [18.x]
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #     - name: Set project name
  #       run: echo "REPOSITORY_NAME=middleware-maraffa" >> $GITHUB_ENV
  #     - name: Set build version
  #       run: echo "BUILD_VERSION=1.0.0" >> $GITHUB_ENV
  #     - name: lowercase github.repository
  #       run: |
  #         echo "IMAGE_NAME=`echo ${{github.repository_owner}}/${{ env.REPOSITORY_NAME }} | tr '[:upper:]' '[:lower:]'`" >>${GITHUB_ENV}
  #       if: ${{ github.ref }} == 'refs/heads/main'
  #     - name: Extract tag name # Impllcit constraint the tag can be done only from release in main branch
  #       run: echo "TAG_NAME=${{ github.event.release.tag_name }}"
  #     - name: Set version with latest
  #       run: echo "VERSION=latest" >> $GITHUB_ENV
  #       if: ${{ github.ref }} != 'refs/heads/main'
  #     - name: Set version with Develop
  #       run: echo "VERSION=develop" >> $GITHUB_ENV
  #     - name: Use cache
  #       uses: actions/cache@v2
  #       id: restore-build
  #       with:
  #         path: ./*
  #         key: ${{ github.sha }}
  #     - run: ls
  #     - name: "Login to GitHub Container Registry"
  #       uses: docker/login-action@v1
  #       with:
  #         registry: ghcr.io
  #         username: ${{github.actor}}
  #         password: ${{secrets.GITHUB_TOKEN}}
  #     - name: Build Docker image
  #       run: docker build -t ghcr.io/${{ env.IMAGE_NAME}}:${{ env.VERSION }}  .
  #     - name: Push Docker image
  #       run: docker push ghcr.io/${{ env.IMAGE_NAME}}:${{ env.VERSION }}

  # test:
  #   name: test
  #   needs:
  #   - build
  #   runs-on: ubuntu-22.04
  #   #if: contains(github.event.pull_request.labels.*.name, 'STAGING')
  #   steps:
  #     - uses: actions/download-artifact@v4
  #       with:
  #         name: Package
  #         path: build/*
  # - name: Test
  #   run: gradle test
  # - name: Use cache
  #   uses: actions/cache@v2
  #   id: restore-build
  #   with:
  #     path: ./*
  #     key: ${{ github.sha }}

  # success:
  #   runs-on: ubuntu-22.04
  #   needs:
  #     - build
  #   if: >-
  #     always() && (
  #       contains(join(needs.*.result, ','), 'failure')
  #       || !contains(join(needs.*.result, ','), 'cancelled')
  #     )
  #   steps:
  #     - name: Verify that there were no failures
  #       run: ${{ !contains(join(needs.*.result, ','), 'failure') }}

  # - name: Init gradle wrapper
  #   run: gradle wrapper
  # - name: Change wrapper permissions
  #   run: chmod +x ./gradlew
  # - name: Build with Gradle wrapper
  #   run: ./gradlew build

  # - name: checkout
  #   uses: actions/checkout@v2

  # - name: Setup JDK 1.8
  #   uses: actions/setup-java@v2
  #   with:
  #     java-version: '8'
  #     distribution: 'adopt'

  # - name: Grant Permissions to gradlew
  #   run: chmod +x gradlew
  # - name: Test
  #   run: ./gradlew test --tests "*"
